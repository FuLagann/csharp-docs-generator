"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@actions/core");
/**
 * Upload Status Reporter that displays information about the progress/status of an artifact that is being uploaded
 *
 * Every 10 seconds, the total status of the upload gets displayed. If there is a large file that is being uploaded,
 * extra information about the individual status of an upload can also be displayed
 */
class UploadStatusReporter {
    constructor() {
        this.totalNumberOfFilesToUpload = 0;
        this.processedCount = 0;
        this.largeUploads = new Map();
        this.totalUploadStatus = undefined;
        this.largeFileUploadStatus = undefined;
    }
    setTotalNumberOfFilesToUpload(fileTotal) {
        this.totalNumberOfFilesToUpload = fileTotal;
    }
    start() {
        const _this = this;
        // displays information about the total upload status every 10 seconds
        this.totalUploadStatus = setInterval(function () {
            // display 1 decimal place without any rounding
            const percentage = _this.formatPercentage(_this.processedCount, _this.totalNumberOfFilesToUpload);
            core_1.info(`Total file(s): ${_this.totalNumberOfFilesToUpload} ---- Processed file #${_this.processedCount} (${percentage.slice(0, percentage.indexOf('.') + 2)}%)`);
        }, 10000);
        // displays extra information about any large files that take a significant amount of time to upload every 1 second
        this.largeFileUploadStatus = setInterval(function () {
            for (const value of Array.from(_this.largeUploads.values())) {
                core_1.info(value);
            }
            // delete all entires in the map after displaying the information so it will not be displayed again unless explicitly added
            _this.largeUploads = new Map();
        }, 1000);
    }
    updateLargeFileStatus(fileName, numerator, denomiator) {
        // display 1 decimal place without any rounding
        const percentage = this.formatPercentage(numerator, denomiator);
        const displayInformation = `Uploading ${fileName} (${percentage.slice(0, percentage.indexOf('.') + 2)}%)`;
        // any previously added display information should be overwritten for the specific large file because a map is being used
        this.largeUploads.set(fileName, displayInformation);
    }
    stop() {
        if (this.totalUploadStatus) {
            clearInterval(this.totalUploadStatus);
        }
        if (this.largeFileUploadStatus) {
            clearInterval(this.largeFileUploadStatus);
        }
    }
    incrementProcessedCount() {
        this.processedCount++;
    }
    formatPercentage(numerator, denominator) {
        // toFixed() rounds, so use extra precision to display accurate information even though 4 decimal places are not displayed
        return ((numerator / denominator) * 100).toFixed(4).toString();
    }
}
exports.UploadStatusReporter = UploadStatusReporter;
//# sourceMappingURL=upload-status-reporter.js.map